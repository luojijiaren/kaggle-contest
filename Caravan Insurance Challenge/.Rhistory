mydata=read.csv(file.choose())
install.packages('ggplot2')
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
X=2
typeof(X)
Y=2L
typeof(Y)
library(ggplot2)
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
N=100
N=100
N=100
N=100
N=100
N=100
N=100
counter=0
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
counter=counter+1
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=1000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=10000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- function (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
nll <- make.NeglogLik(normals)
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
nll <- make.NegLogLik(normals)
nll
optim (c(mu=0,sigma=1),nll)$par
nll <- make.NegLogLik(normals, c(1,False))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
nll <- make.NegLogLik(normals, c(1,FALSE))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<-seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<- Sys.time()
x
polluutantmean(''specdata'','sulfate',1:10)
polluutantmean('specdata','sulfate',1:10)
pollutantmean('specdata','sulfate',1:10)
install.packages("swirl")
library(swirl)
swirl()\
swirl()
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<11
10<=10
5!=7
NOT 5==7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <-sample(10)
ints
ints > 5
which(ints>7)
any(ints<=0)
any(ints<0)
all(ints>0)
exit()
exit
quit()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
f1 <- funciton(x){}
f1 <- funciton(x){}
f1 <- funciton(x){x}
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(var,c(1.4,3.6,7.9,8.8)
)
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram('hi','lynn')
submit()
submit()
submit()
submit()
submit()
mad_libs('ruseel st','a b','wo shi')
submit()
'I love' %p% 'R!'
'I'%P%'love'%p%'R!'
'I'%p%'love'%p%'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2=as.Date(d1-1)
d2<-as.Date('1969-01-01')
unclass(d2)
Sys.time()
tq <- Sys.time()
t1 <- Sys.time()
print(t1)
t1
class(t1)
unclass(t1)
t2 <-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1 <- weekdays(Sys.Date())
weekdays(d1)
months(t1)
months(t2)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- str("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>d1
Sys.time()>t1
Sys.time()-t1
difftime
difftime(Sys.time(),t1,units='days')
setwd('C:/Users/fzhan/Documents/GitHub/Caravan Insurance Challenge')
data=read.csv('caravan-insurance-challenge.csv')
training=data[which(data$ORIGIN=='train'),][,2:87]
t0=data[which(data$CARAVAN==0),]
t1=data[which(data$CARAVAN==1),]
install.packages("DMwR")
library(DMwR)
?SMOTE
training2=SMOTE(training$CARAVAN,training,perc.over=500,perc.under = 80)
class(training$CARAVAN)
training$CARAVAN=as.factor(training$CARAVAN)
training=SMOTE(training$CARAVAN,training,perc.over=500,perc.under = 80)
training$CARAVAN=as.numeric(training$CARAVAN)
training=SMOTE(training$CARAVAN~.,training,perc.over=500,perc.under = 80)
training=SMOTE(CARAVAN~.,training,perc.over=500,perc.under = 80)
table(training$CARAVAN)
training=SMOTE(CARAVAN~.,training,perc.over=500,perc.under = 80)
training=SMOTE(CARAVAN~.,training,perc.over=600,perc.under = 100)
training=data[which(data$ORIGIN=='train'),][,2:87]
table(training$CARAVAN)
training=SMOTE(CARAVAN~.,training,perc.over=600,perc.under = 100)
training$CARAVAN=as.factor(training$CARAVAN)
class(training$CARAVAN)
factor(CARAVAN)
training=SMOTE(CARAVAN~.,training,perc.over=600,perc.under = 100)
View(training)
View(training)
table(training$CARAVAN)
training=SMOTE(CARAVAN~.,training,perc.over=600,perc.under = 80)
table(training$CARAVAN)
training=data[which(data$ORIGIN=='train'),][,2:87]
training$CARAVAN=as.factor(training$CARAVAN)
training=SMOTE(CARAVAN~.,training,perc.over=600,perc.under = 80)
table(training$CARAVAN)
training=data[which(data$ORIGIN=='train'),][,2:87]
training$CARAVAN=as.factor(training$CARAVAN)
table(training$CARAVAN)
training=SMOTE(CARAVAN~.,training,perc.over=600,perc.under = 80)
table(training$CARAVAN)
1670/2436
7/5
7/6
training=data[which(data$ORIGIN=='train'),][,2:87]
#0=data[which(data$CARAVAN==0),]
#1=data[which(data$CARAVAN==1),]
library(DMwR)
training$CARAVAN=as.factor(training$CARAVAN)
table(training$CARAVAN)
training=SMOTE(CARAVAN~.,training,perc.over=600,perc.under = 117)
table(training$CARAVAN)
training$CARAVAN=as.numeric(training$CARAVAN)
set.seed(101) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 90% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(training), size = floor(.9*nrow(training)), replace = F)
train <- training[sample, ]
eval  <- training[-sample, ]
attach(train)
library(randomForest)
set.seed(1)
tr=randomForest(factor(CARAVAN)~.,ntree=100,data=train,subset=sample,mtry=9,importance=TRUE)
yhat.tr=predict(tr,newdata = eval)
pretable=table(yhat.tr,factor(eval$CARAVAN))
tr=randomForest(as.factor(CARAVAN)~.,ntree=100,data=train,subset=sample,mtry=9,importance=TRUE)
class(CARAVAN)
CARAVAN=as.factor(CARAVAN)
tr=randomForest(CARAVAN~.,ntree=100,data=train,subset=sample,mtry=9,importance=TRUE)
TABLE(CARAVAN)
table(CARAVAN)
View(train)
View(train)
which(!complete.cases(train))
?randomForest
CARAVAN=as.factor(CARAVAN)
tr=randomForest(CARAVAN~.,ntree=100,data=train,subset=sample,mtry=9,importance=TRUE,na.action = na.omit)
CARAVAN=as.factor(CARAVAN)
tr=randomForest(CARAVAN~.,data=train,mtry=9,importance=TRUE)
training=data[which(data$ORIGIN=='train'),][,2:87]
#0=data[which(data$CARAVAN==0),]
#1=data[which(data$CARAVAN==1),]
library(DMwR)
training$CARAVAN=as.factor(training$CARAVAN)
table(training$CARAVAN)
training=SMOTE(CARAVAN~.,training,perc.over=600,perc.under = 117)
table(training$CARAVAN)
#training$CARAVAN=as.numeric(training$CARAVAN)
#s=sample.int(n=nrow(t0),size=nrow(t1),replace=F)
#t2=t0[s,]
#train=rbind(t1,t2)
test=data[which(data$ORIGIN=='test'),][,2:87]
set.seed(101) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 90% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(training), size = floor(.9*nrow(training)), replace = F)
train <- training[sample, ]
eval  <- training[-sample, ]
attach(train)
library(randomForest)
set.seed(1)
attach(training)
library(randomForest)
set.seed(1)
CARAVAN=as.factor(CARAVAN)
tr=randomForest(CARAVAN~.,ntree=100,data=training,subset=sample,mtry=9,importance=TRUE)
yhat.tr=predict(tr,newdata = eval)
pretable=table(yhat.tr,factor(eval$CARAVAN))
pretable
239+198
437/488
tr=randomForest(CARAVAN~.,ntree=100,data=training,subset=sample,mtry=29,importance=TRUE)
yhat.tr=predict(tr,newdata = eval)
pretable=table(yhat.tr,factor(eval$CARAVAN))
pretable
nrow(eval)
accuracy=sum(diag(pretable))/nrow(eval)
accuracy
install.packages("pROC")
library(pROC)
auc=roc(factor(eval$CARAVAN),yhat.tr)
auc
class(yhat.tr)
auc=roc(eval$CARAVAN,as.numeric(as.charactor(yhat.tr)))
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.tr)))
auc
tr=randomForest(CARAVAN~.,data=training,subset=sample,importance=TRUE)
yhat.tr=predict(tr,newdata = eval)
pretable=table(yhat.tr,factor(eval$CARAVAN))
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.tr)))
auc
glm.fit=glm(CARAVAN~.data=training,subset=sample,family=binomial)
glm.fit=glm(CARAVAN~.,data=training,subset=sample,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,newdata=eval,type='response')
head(eval$CARAVAN)
class(eval$CARAVAN)
head(glm.probs)
glm.pred=rep(0,nrow(eval))
glm.pred(glm.probs>.5)=1
auc=roc(eva
glm.probs=predict(glm.fit,newdata=eval,type='response')
glm.pred=rep(0,nrow(eval))
glm.pred(glm.probs>.5)=1
glm.probs=predict(glm.fit,newdata=eval,type='response')
glm.pred=rep(0,nrow(eval))
glm.pred(glm.probs>.5)=1
glm.pred[glm.probs>.5]=1
auc=roc(eval$CARAVAN,as.numeric(as.character(glm.pred)))
auc
?svm
install.packages("e1071")
library(e1017)
library(e1071)
?svm
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='polynomial',cost=10)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='linear',cost=10)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='sigmoid',cost=10)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=10)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=20)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=1)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=5)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=8)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=12)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=15)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=13)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='radial basis',cost=11)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
library(e1071)
svmfit=svm(CARAVAN~.,data=training,subset=sample,kernal='polynomial',cost=12)
yhat.svm=predict(svmfit,newdata = eval)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.svm)))
auc
install.packages("gbm")
library(gbm)
set.seed(4)
boost=gbm(CARAVAN~.,data=training,subset=sample,distribution='gaussian',n.trees=5000,interaction.depth=4)
boost=gbm(CARAVAN~.,data=training[sample,],distribution='gaussian',n.trees=5000,interaction.depth=4)
yhat.boost=predict(boost,newdata = training[-sample,],n.trees=5000)
auc=roc(eval$CARAVAN,as.numeric(as.character(yhat.boost)))
auc
